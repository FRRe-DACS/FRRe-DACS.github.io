[{"id":0,"href":"/programa-analitico/unidad-01/","title":"UNIDAD 1","parent":"Programa Analítico","content":"Introducción a las aplicaciones cliente-servidor    Repaso de las arquitecturas más comunes en sistemas distribuidos. Modelo de capas. Dos y tres capas. Modelo de tres capas, la tendencia actual. Modelo distribuido y de microservices, introducción. Interfaces de acceso a los datos: ODBC, OLE DB y los objetos ADO. JDBC. Publicadores y consumidores de datos. Patrones de diseño en arquitecturas distribuidas, Event-Sourcing.\nObjetivos específicos     Discriminar las diferencias conceptuales entre las distintas tecnologías existentes.  "},{"id":1,"href":"/programa-analitico/unidad-02/","title":"UNIDAD 2","parent":"Programa Analítico","content":"Servicios de BackEnd y servidores de aplicaciones    Arquitecturas de sistemas cliente servidor de 2 y 3 capas. Como se implementa una capa de negocios. Objetos basados en clases reutilizables. Modelos de ejecución actuales. Máquinas virtuales, containers y virtualización a nivel SO. Compiladores just-in-time. Distribución de aplicaciones a través de la red. Frameworks de persistencia, hibernate, JPA.\nObjetivos específicos     Seleccionar y aplicar correctamente las tecnologías existentes en el mercado. Que sepa analizar el contexto del problema y resuelva el mismo con la mejor herramienta posible.  "},{"id":2,"href":"/programa-analitico/unidad-03/","title":"UNIDAD 3","parent":"Programa Analítico","content":"El cliente liviano    Desarrollo con clientes livianos, el rol de los navegadores de internet en las tecnologías actuales. HTML. Arquitectura de un navegador de internet. Aplicaciones para Web: escenarios que soluciona. HTML dinámico: formas de generarlo. Arquitectura del servidor HTTP. Guiones (scripts). Scripting de lado del servidor. Scripting del lado del cliente. Lenguajes de scripting, generalidades. Formularios Web: qué son, cómo funcionan. Aplicaciones HTTP. Mantenimiento de sesiones. Estructuras de memoria, y estructuras relacionales para mantener sesiones. Cabecera HTTP. Acceso a bases de datos del lado del servidor. Seguridad de sistema web, frameworks de membresía. Consideraciones con barreras cortafuegos, enrutadores, proxies. Generalidades de capa de conexión segura (SSL). Firmas digitales, autoridad de internet. HTML5, escenarios que soluciona. Manejos de la visual con hojas de estilos en cascada y estilos XSLT. Javascript con Jquery.\nObjetivos específicos     Dominar las bases de las aplicaciones basadas en internet.  "},{"id":3,"href":"/programa-analitico/unidad-04/","title":"UNIDAD 4","parent":"Programa Analítico","content":"Aplicaciones distribuidas y servicios de internet    Evolución de los sistemas distribuidos. Desarrollo de aplicaciones distribuidas con clientes pesados y decodificadores de XML. Servicios Web en la internet. Protocolo de acceso simple a objetos SOAP. Modelo REST, Open Data Protocol, ATOM, JSON. Estándares basados en el modelo REST. Generalidades de JSON y su comparación con XML. HTML 5 Websockets. WebAPI. Conexiones long-polling, forever frame, server-sent events y websockets, ventajas y desventajas. Ejemplos de uso.\nObjetivos específicos     Diseñar un sistema distribuido basado en redes públicas  "},{"id":4,"href":"/programa-analitico/unidad-05/","title":"UNIDAD 5","parent":"Programa Analítico","content":"Frameworks de desarrollo de uso en la industria    La tecnología .Net, Java, Golang, Rust. Similitudes y diferencias en el modelo de ejecución. Arquitectura de las máquinas virtuales específicas. Clientes pesados. Clientes livianos. Objetos de negocio. Capa de acceso a datos. Framework de persistencia. Capa de fachada web y cliente inteligente. Entornos integrados de desarrollo. Ciclos de vida de una aplicación. Servicios de los entornos de desarrollo integrados (IDE) modernos. Servidores de integración continua. Ciclo de vida de proyectos basado en la nube.\nObjetivos específicos:     Familiarizarse con las grandes familias de plataformas tecnológicas en uso en la industria mundial.  "},{"id":5,"href":"/programa-analitico/unidad-06/","title":"UNIDAD 6","parent":"Programa Analítico","content":"Las tecnologías emergentes: la Nube    Comparativa entre sistemas en la nube y sistemas sobre demanda. El software como servicio. La infraestructura como servicio. El ecosistema de desarrollo, venta de aplicaciones, entorno de ejecución, dependencia de servicios específicos basados en la nube: localización y seguimiento, licenciamiento, autenticación y autorización distribuidas. Servicios en la nube para clientes convencionales y para dispositivos móviles. Comparativas entre Amazon Cloud Services, Windows Azure, Google Apps, y su integración con las IDEs correspondientes. Kuberntes y las arquitecturas de microservicios y los service mesh.\nObjetivos específicos     Diseñar un sistema basado en servicios en la nube.  "},{"id":6,"href":"/categories/","title":"Categories","parent":"Fundamentación","content":""},{"id":7,"href":"/","title":"Fundamentación","parent":"","content":"La asignatura Desarrollo de Aplicaciones Cliente Servidor ha dado, en su dictado de más de una década, un contacto intenso con las herramientas de uso normal en la industria para el desarrollo y la ingeniería de software. En la actualidad estos conceptos generales siguen siendo válidos, pero han cambiado significativamente los detalles subyacentes en el diseño, programación, prueba, despliegue y mantenimiento de una aplicación cliente-servidor. El tráfico de internet generado por dispositivos táctiles y móviles es mayor que el de equipos de escritorio, y la introducción las nueves de datos fuerzan al ingeniero a dominar una nueva forma de crear aplicaciones altamente conectadas. Las tecnologías cliente-servidor han mutado, mayor mente desde un modelo monolítico a un modelo distribuido de micro-servicios, basado en infraestructuras basadas en contenedores, posibilitando el escalamiento horizontal. Un importante porcentaje de código de cualquier aplicación está relacionado con la administración de conectividad de datos sobre redes públicas, y por lo tanto se hace mandatorio enfocarse en los estándares emergentes y abiertos basados en internet, tanto en el cliente como en la infraestructura del servidor.\nLa adopción de los lenguajes de programación también han cambiado significativamente, pasando de lenguajes como javascript y golang, haciendo que los frameworks de ejecución cambien significativamente. Esto incluye servicios de soporte al ciclo de vida de una aplicación, desde el diseño hasta el mantenimiento de la misma, tanto en los modelos on-premise, como los basados en la nube. Igualmente, los sistemas convergentes son una realidad, al borrarse los límites entre los sistemas móviles y de escritorio, las técnicas de desarrollo también han mutado. Es evidente que semejante razón de cambio exige una materia de orientación eminentemente práctica y con contenido puesto al día, contemplando los conceptos tradicionales de la ingeniería de software cliente-servidor, pero haciendo énfasis práctico en los estándares emergentes de estos nuevos modelos, sobre todo en las nuevas tecnologías convergentes.\nObjetivos Generales de la asignatura     Que el alumno profundice los conocimientos en el análisis, diseño y desarrollo de aplicaciones en la metáfora cliente-servidor. Que el alumno aplique las herramientas que el mercado ofrece para crear soluciones útiles a problemas reales, produciendo sistemas de alto rendimiento. Que el alumno tenga acceso a tecnologías de última generación. Que el alumno pueda desarrollar aplicaciones utilizando tecnologías emergentes, como ser la computación en la nube.  "},{"id":8,"href":"/programa-analitico/","title":"Programa Analítico","parent":"Fundamentación","content":"UNIDAD 1: Introducción a las aplicaciones cliente-servidor    Repaso de las arquitecturas más comunes en sistemas distribuidos. Modelo de capas. Dos y tres capas. Modelo de tres capas, la tendencia actual. Modelo distribuido y de microservices, introducción. Interfaces de acceso a los datos: ODBC, OLE DB y los objetos ADO. JDBC. Publicadores y consumidores de datos. Patrones de diseño en arquitecturas distribuidas, Event-Sourcing.\nObjetivos específicos     Discriminar las diferencias conceptuales entre las distintas tecnologías existentes.  "},{"id":9,"href":"/tags/","title":"Tags","parent":"Fundamentación","content":""}]